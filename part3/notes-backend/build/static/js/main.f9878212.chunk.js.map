{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","style","marginLeft","maxHeight","Notification","message","Footer","color","fontStyle","fontSize","baseUrl","methodToBackendReturnJson","url","method","body","a","fetch","headers","response","status","Error","json","noteServiceAsync","getAll","request","nonExisting","id","date","respFormat","concat","create","newObject","JSON","stringify","update","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","then","catch","err","console","log","notesToShow","filter","map","find","n","changedNote","data","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9878212.chunk.js","sourcesContent":["import React from 'react'\r\n// import {funcss, anotherfunc} from './tryds'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n \r\n  const buttonStyle = {\r\n    marginLeft: 5,\r\n    maxHeight: 20\r\n  }\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance} style={buttonStyle}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Footer","// const baseUrl = 'https://polar-hamlet-28234.herokuapp.com/api/notes'\r\nconst baseUrl = '/api/notes';\r\n// const baseUrl = 'http://localhost:3001/api/notes'\r\n\r\n//This is the basic method\r\nconst methodToBackendReturnJson = async (url, method, body) => {\r\n    const response = await fetch(url, {\r\n                            method: method,\r\n                            headers: {\r\n                              'Accept': 'application/json',\r\n                              'Content-Type': 'application/json'\r\n                            },\r\n                            body: body\r\n                          })\r\n  if (response.status !== 200) {\r\n    throw new Error(`cannot fetch data with error code: ${response.status}`);\r\n  }\r\n                               \r\n  return response.json();\r\n}\r\n\r\nconst getAll = async () => {\r\n\r\n  const request = await fetch(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n\r\n  const respFormat = await request.json();\r\n\r\n  return respFormat.concat(nonExisting);\r\n}\r\n\r\n\r\nconst create = newObject => {\r\n  return methodToBackendReturnJson(baseUrl, \"POST\", JSON.stringify(newObject));\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return methodToBackendReturnJson(`${baseUrl}/${id}`, \"PUT\", JSON.stringify(newObject));\r\n}\r\n\r\nconst noteServiceAsync = {\r\n    getAll, \r\n    create, \r\n    update\r\n}\r\n\r\nexport default noteServiceAsync","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true) \n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll()\n      .then(response => setNotes(response))\n      .catch(err => {\n        console.log(err)\n        setNotes([])\n        })\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n    \n  const addNote = event => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n\n      noteService.create(noteObject)\n        .then(data => setNotes(notes.concat(data)))\n\n    setNewNote(\"\")\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important}\n\n    //The funciton works using the ol' async, then (pun intended) uses the Json response to check the notes and change it\n    noteService.update(id, changedNote)\n      .then(data => setNotes(notes.map(note => note.id !== id ? note : data)))\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 6000)        \n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      \n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n          )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer/> \n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App.js'\n\n// const returnJson = async url => {\n//   const resp = await fetch(url);\n//   if (resp.status !== 200) {\n//     throw new Error(`cannot fetch data with error code: ${resp.status}`);\n//   }\n//   return resp.json();\n// }\n// returnJson('http://localhost:3001/notes')\n  // .then(notesJson => {\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}